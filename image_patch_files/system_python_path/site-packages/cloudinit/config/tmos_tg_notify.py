#!/usr/bin/env python

# coding=utf-8
# pylint: disable=broad-except,unused-argument,line-too-long
# Copyright (c) 2016-2018, F5 Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
This module contains the workflow to notify if a traffic-group tranistion is triggerred
"""

import logging
import os
import sys

from cloudinit import util
from cloudinit import tmos_onboard_utils

LOG_FILE = '/var/log/f5-cloudinit.log'

CLOUD_CONFIG_FILE = '/opt/cloud/instance/cloud-config.txt'

tmos_onboard_utils.touch_file(LOG_FILE)

LOG = logging.getLogger('tmos_tg_notify')
LOG.setLevel(logging.DEBUG)
FORMATTER = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
LOGFILE = logging.FileHandler(LOG_FILE)
LOGFILE.setLevel(logging.DEBUG)
LOGFILE.setFormatter(FORMATTER)
LOG.addHandler(LOGFILE)


def handle(module_name, cloud_config, traffic_group, action):
    """Cloud-init processing function"""
    if os.path.exists(CLOUD_CONFIG_FILE):
        if action == 'active':
            if 'tgactive_url' in cloud_config[module_name]:
                tgactive_url = cloud_config[module_name]['tgactive_url']
                if tgactive_url:
                    LOG.info('tgactive_url %s from module %s found', tgactive_url, module_name)
                    tmos_onboard_utils.send_tg_notification(tgactive_url, traffic_group, action)
        if action == 'standby':
            if 'tgstandby_url' in cloud_config[module_name]:
                tgstandby_url = cloud_config[module_name]['tgstandby_url']
                if tgstandby_url:
                    LOG.info('tgactive_url %s from module %s found', tgstandby_url, module_name)
                    tmos_onboard_utils.send_tg_notification(tgstandby_url, traffic_group, action)
        if action == 'refresh':
            if 'tgrefresh_url' in cloud_config[module_name]:
                tgrefresh_url = cloud_config[module_name]['tgrefresh_url']
                if tgrefresh_url:
                    LOG.info('tgrefresh_url %s from module %s found', tgrefresh_url, module_name)
                    tmos_onboard_utils.send_tg_notification(tgrefresh_url, traffic_group, action)


if __name__ == "__main__":
    if len(sys.argv) < 4:
        LOG.error('script called with out required CLI arguments: module_name, traffic_group, action')
        sys.exit(1)
    else:
        LOG.info('scripted called with arguments: %s', ','.join(sys.argv))
    # Running the cloud-init module from the CLI python interpreter
    os.environ['PYTHONWARNINGS']="ignore:Unverified HTTPS request"
    CLOUD_CONFIG = {}
    if os.path.exists(CLOUD_CONFIG_FILE):
        CLOUD_CONFIG = util.read_conf(CLOUD_CONFIG_FILE)
    module_name = sys.argv[1]
    traffic_group = sys.argv[2]
    action = sys.argv[3]
    handle(module_name, CLOUD_CONFIG, traffic_group, action)